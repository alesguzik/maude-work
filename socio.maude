fmod SOCIO-BASE is
    sorts Axis IE NS TF PJ Tim .
    subsorts IE NS TF PJ < Axis .
    ops introverted extraverted : -> IE [ctor] .
    ops intuition sensing       : -> NS [ctor] .
    ops thinking feeling        : -> TF [ctor] .
    ops percieving judging      : -> PJ [ctor] .
    ops i e n s t f p j : -> Axis .
    op tim : IE NS TF PJ -> Tim .
    op invert : Axis -> Axis .
    ops don duma gugo rob gam maks zhuk es nap bal jack drai shtir dost gek gab : -> Tim .

    eq i = introverted . eq e = extraverted .
    eq n = intuition   . eq s = sensing .
    eq t = thinking    . eq f = feeling .
    eq p = percieving  . eq j = judging .

    eq invert(introverted) = extraverted .
    eq invert(extraverted) = introverted .
    eq invert(intuition)   = sensing .
    eq invert(sensing)     = intuition .
    eq invert(thinking)    = feeling .
    eq invert(feeling)     = thinking .
    eq invert(percieving)  = judging .
    eq invert(judging)     = percieving .

    eq don   = tim(e,n,t,p) .
    eq duma  = tim(i,s,f,p) .
    eq gugo  = tim(e,s,f,j) .
    eq rob   = tim(i,n,t,j) .
    eq gam   = tim(e,n,f,j) .
    eq maks  = tim(i,s,t,j) .
    eq zhuk  = tim(e,s,t,p) .
    eq es    = tim(i,n,f,p) .
    eq nap   = tim(e,s,f,p) .
    eq bal   = tim(i,n,t,p) .
    eq jack  = tim(e,n,t,j) .
    eq drai  = tim(i,s,f,j) .
    eq shtir = tim(e,s,t,j) .
    eq dost  = tim(i,n,f,j) .
    eq gek   = tim(e,n,f,p) .
    eq gab   = tim(i,s,t,p) .
endfm

fmod SOCIO-MODEL-A is
    protecting SOCIO-BASE .
    sorts Aspect Function .
    subsorts NS TF < Aspect .
    op __ : IE Aspect -> Function .
    ops f1 f2 f3 f4 f5 f6 f7 f8 : Tim -> Function .

    var IE : IE . var NS : NS . var TF : TF . var PJ : PJ .
    vars A : Aspect .
    vars T : Tim .

    eq f1(tim(IE, NS, TF, percieving)) = IE NS .
    eq f1(tim(IE, NS, TF, judging   )) = IE TF .
    eq f2(tim(IE, NS, TF, percieving)) = invert(IE) TF .
    eq f2(tim(IE, NS, TF, judging   )) = invert(IE) NS .

    ceq f3(T) = IE invert(A) if IE A := f1(T) .
    ceq f4(T) = IE invert(A) if IE A := f2(T) .
    ceq f5(T) = invert(IE) invert(A) if IE A := f1(T) .
    ceq f6(T) = invert(IE) invert(A) if IE A := f2(T) .
    ceq f7(T) = invert(IE) A if IE A := f1(T) .
    ceq f8(T) = invert(IE) A if IE A := f2(T) .
endfm

fmod SOCIO-MODEL-A-RELS is
    protecting SOCIO-MODEL-A .
    sort Relationship .
    op _with_ : Tim Tim -> Relationship .
    ops tozhd dual zerkal activ >zakaz> >revision> del mirazh superego pp quasitozhd conflict <zakaz< <revision< rodstv poludual : -> Relationship [ctor] .

    vars T1 T2 : Tim .

    ceq T1 with T2 = tozhd      if f1(T1) == f1(T2) and f2(T1) == f2(T2) .
    ceq T1 with T2 = dual       if f1(T1) == f5(T2) and f2(T1) == f6(T2) .
    ceq T1 with T2 = zerkal     if f1(T1) == f2(T2) and f2(T1) == f1(T2) .
    ceq T1 with T2 = activ      if f1(T1) == f6(T2) and f2(T1) == f5(T2) .
    ceq T1 with T2 = >zakaz>    if f1(T1) == f8(T2) and f2(T1) == f5(T2) .
    ceq T1 with T2 = >revision> if f1(T1) == f4(T2) and f2(T1) == f1(T2) .
    ceq T1 with T2 = del        if f1(T1) == f3(T2) and f2(T1) == f2(T2) .
    ceq T1 with T2 = mirazh     if f1(T1) == f7(T2) and f2(T1) == f6(T2) .
    ceq T1 with T2 = superego   if f1(T1) == f3(T2) and f2(T1) == f4(T2) .
    ceq T1 with T2 = pp         if f1(T1) == f7(T2) and f2(T1) == f8(T2) .
    ceq T1 with T2 = quasitozhd if f1(T1) == f8(T2) and f2(T1) == f7(T2) .
    ceq T1 with T2 = conflict   if f1(T1) == f4(T2) and f2(T1) == f3(T2) .
    ceq T1 with T2 = <revision< if f1(T1) == f2(T2) and f2(T1) == f3(T2) .
    ceq T1 with T2 = <zakaz<    if f1(T1) == f6(T2) and f2(T1) == f7(T2) .
    ceq T1 with T2 = rodstv     if f1(T1) == f1(T2) and f2(T1) == f4(T2) .
    ceq T1 with T2 = poludual   if f1(T1) == f5(T2) and f2(T1) == f8(T2) .
endfm